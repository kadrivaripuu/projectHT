OOP

Q.1     How would you describe the abstraction in OOP?
Abstraction is selecting data from a larger pool to show only the relevant details to the object. It helps to reduce programming complexity and effort. In Java, abstraction is accomplished using Abstract classes and interfaces.


Q.2     How it is possible to implement Encapsulation in a class?
It refers to the bundling of data with the methods that operate on that data, or the restricting of direct access to some of an object's components. 
Encapsulation is used to hide the values or state of a structured data object inside a class, preventing unauthorized parties' direct access to them. Publicly accessible methods are generally provided in the class (so-called "getters" and "setters") to access the values, and other client classes call these methods to retrieve and modify the values within the object.


Q.3     What are the benefits of Inheritance between classes?
- Frequent use of code written once, i.e. code reusability.
- One superclass can be used for the number of subclasses in a hierarchy.
- No changes to be done in all base classes, just do changes in parent class only.
- Inheritance is used to generate more dominant objects.
- Inheritance avoids duplicity and data redundancy.
- Inheritance is used to avoid space complexity and time complexity.


Q.4     How would you describe the polymorphism?
Polymorphism means many forms - a single object can refer the super class or sub-class depending on the reference type.  Ability to process objects differently depending on their data type or class. More specifically, it is the ability to redefine methods for derived classes


Q.5     What it means and where can be used the keyword static?
Suppose you wanted to make a dress from a dress that you already have. You can simply use the original dress to make the new dress. Or, you could make a paper pattern from your original dress and use the paper pattern to create new dresses.

A static method in Java belongs to the class and is like the blue print or the original dress. A non-static method in Java belongs to the object of a class and is like the paper pattern made from the blue print or original dress.


Q.6     Where can I access a protected method?

Q.7     What it means for a method to be public or private?

Q.8     What is abstract class?

Q.9     What is interface?

Q.10     Can you describe what is method override?


Threads:

                1) What is a thread?
                
                2) How can I run a new thread?
                
                3) What does the synchronized modifier do when applied to a method?
                
                4) What happens if I place synchronized on a static method?
                
                5) What are race conditions between threads?
                
                

Collections

                1) Describe Collections classes Api (List, Set, Map, Queue, Stack)
                
                2) What are main implementations of List? (What are their difference)

                3) Describe some implementations of Set interface

                4) Where is hashcode method used in collections?

                5) Describe how HashTable works (put and get)

                6) What are buckets in HashMap?

                7) What is the load factor in a HashMap?

                8) How a TreeSet is able to order objects from a Person class?

                9) How a Set<Person> is able to detect duplicates when I add a new Person in the Set?

                10) What it means O(1) O(n) O(n2)?


JDBC

                1) Can you describe main java objects involved into a task where I need to query DB tables?

                2) Why Connections are expensive to create?

                3) How can we mitigate (2)?

                4) What are benefits of PreparedStatement over Statement objects?

                5) What is a Db Driver?
                
                


SPRING

                1) Can you explain what is Dependency Injection?
                
                2) What are the benefits of dependency injection?
                
                3) What are the different ways I can populate a Spring Application Context?
                
                4) Can you tell pros and cons of each one of those (3) ways?
                
                5) What it means @Autowired? Where can I use it? 
                
                6) What are scopes of Spring bean?
                
                7) How can I run some code immediately after a Spring managed bean is built?
                
                8) What is AOP? (Describe main concepts)

                9) What is aop weaver process?

                10) Where aop is used in Spring? (Provide example)

HIBERNATE:

                1) What is a Hibernate SessionFactory ?
                
                2) What is a Hibernate Session?
                
                3) How many ways you know about how to query a db with hibernate?
                
                4) How can you implement relationships between table in Entity classes?
                
ARCHITECTURE:

                1) What problems should be solved in Controller classes?
                2) What problems should be solved in Service classes?
                3) What problems should be solved in Dao classes?
				4) Principles of exception handling through layers
                5) What is a unit test? How should it be designed?
                6) What is integration test? How should it be designed?
